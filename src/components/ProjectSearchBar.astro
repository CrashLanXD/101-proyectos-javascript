---
import SearchIcon from "@/icons/SearchIcon.astro";
---

<div
  class:list={[
    "container max-w-6xl 2xl:max-w-screen-2xl px-5 mb-5 -mt-5 gap-2",
    "mx-auto flex items-center justify-center group",
  ]}
>
  <SearchIcon
    class:list={[
      "size-6 mt-2 transition-all",
      "text-neutral-400 dark:text-neutral-500",
      "group-hover:text-neutral-600 dark:group-hover:text-neutral-200",
      "group-focus-within:text-neutral-600 dark:group-focus-within:text-neutral-200",
      "group-hover:scale-110 group-focus-within:scale-110",
    ]}
  />
  <input
    type="text"
    id="searchInput"
    placeholder="Buscar proyectos"
    spellcheck="false"
    autocorrect="off"
    autocapitalize="off"
    maxlength="100"
    aria-label="Buscar proyectos"
    autocomplete="off"
    inputmode="text"
    class:list={[
      "w-full mx-auto px-3 py-2",
      "bg-transparent outline-none border-b-2 transition-colors",
      "text-dark dark:text-light",
      "border-b-neutral-400 dark:border-b-neutral-500",
      "hover:border-b-neutral-600 dark:hover:border-b-neutral-200",
      "focus:border-b-neutral-600 dark:focus:border-b-neutral-200",
    ]}
  />
</div>

<script>
  import { type Project } from "@/types/Project";
  import { $, $$ } from "@/lib/domSelector";
  import { PROJECTS } from "@/constants/projects";

  document.addEventListener("astro:page-load", () => {
    const $elems = {
      searchInput: $("#searchInput") as HTMLInputElement,
      allProjects: $$(".project"),
      constructionMessage: $("#constructionMessage"),
      noResultsMessage: $("#noResultsMessage"),
      projectsGrid: $(".projects-grid"),
    };

    if (Object.values($elems).some((el) => !el)) return;

    // cache project elemenst and titles
    const projectElements = Array.from($elems.allProjects);
    const projectTitles = projectElements.map((p) => p.querySelector("h3")?.textContent?.trim() ?? "");

    if (projectTitles.length > 0) {
      $elems.searchInput.placeholder = `${projectTitles[Math.floor(Math.random() * projectTitles.length)]}`;
    }

    // optimize levenshtein distance function with lazy evaluation
    function levenshteinDistance(a: string, b: string, threshold: number): number {
      const aLen = a.length;
      const bLen = b.length;
      if (Math.abs(aLen - bLen) > threshold) return threshold + 1;

      const matrix = Array(bLen + 1).fill(null).map(() => Array(aLen + 1).fill(0));

      for (let i = 0; i <= bLen; i++) matrix[i][0] = i;
      for (let j = 0; j <= aLen; j++) matrix[0][j] = j;

      for (let i = 1; i <= bLen; i++) {
        let minRow = threshold + 1;
        for (let j = 1; j <= aLen; j++) {
          const cost = b[i - 1] === a[j - 1] ? 0 : 1;
          matrix[i][j] = Math.min(
            matrix[i - 1][j] + 1,
            matrix[i][j - 1] + 1,
            matrix[i - 1][j - 1] + cost
          );
          minRow = Math.min(minRow, matrix[i][j]);
        }
        if (minRow > threshold) return threshold + 1;
      }
      return matrix[bLen][aLen];
    }

    function filterProjects(searchTerm: string): Project[] {
      const searchLower = searchTerm.toLowerCase();
      const titleThreshold = 4;
      const labelThreshold = 2;

      return PROJECTS.filter(({ title, labels }, idx) => {
        const number = idx < 9 ? `0${idx + 1}` : `${idx + 1}`;
        const titleDistance = levenshteinDistance(title.toLowerCase(), searchLower, titleThreshold);

        const labelMatches = labels?.some((label) => {
          return levenshteinDistance(label.toLowerCase(), searchLower, labelThreshold) <= labelThreshold;
        }); 

        return (
          number.includes(searchLower) ||
          title.toLowerCase().startsWith(searchLower) ||
          labels?.some((label) => label.toLowerCase().startsWith(searchLower)) ||
          titleDistance <= titleThreshold ||
          labelMatches
        );
      });
    }

    function renderProjects(filteredProjects: Project[]) {
      const filteredTitles = new Set(filteredProjects.map((project) => project.title));
      const classChanges: { $el: Element; shouldShow: boolean }[] = [];

      $elems.allProjects.forEach((project, idx) => {
        const projectTitle = projectTitles[idx];
        const shouldShow = filteredTitles.has(projectTitle);
        if (project.classList.contains("hidden") !== !shouldShow)
          classChanges.push({ $el: project, shouldShow });
      });

      for (const { $el, shouldShow } of classChanges) $el.classList.toggle("hidden", !shouldShow);

      $elems.constructionMessage?.classList.toggle("hidden", $elems.searchInput.value.trim() !== "");
      $elems.noResultsMessage?.classList.toggle("hidden", filteredProjects.length > 0);
    }

    function debounce<T extends (...args: any[]) => void>(func: T, delay: number) {
      let debounceTimer: ReturnType<typeof setTimeout> | null = null;
      return function (this: any, ...args: Parameters<T>) {
        if (debounceTimer) clearTimeout(debounceTimer);
        debounceTimer = setTimeout(() => func.apply(this, args), delay);
      };
    }

    function handleInputEvent(e: Event) {
      const searchTerm = (e.target as HTMLInputElement).value;
      console.time("filterProjects");
      const filteredProjects = filterProjects(searchTerm);
      renderProjects(filteredProjects);
      console.timeEnd("filterProjects");
    }

    $elems.searchInput.addEventListener("input", debounce(handleInputEvent, 300));

    // Initial render based on the current input value ¯\_(ツ)_/¯
    const initialFilteredProjects = filterProjects($elems.searchInput.value);
    renderProjects(initialFilteredProjects);
  });
</script>
