---
import SearchIcon from "@/icons/SearchIcon.astro";
import UtilIcon from "@/icons/UtilIcon.astro";
import GameIcon from "@/icons/GameIcon.astro";
import MathIcon from "@/icons/MathIcon.astro";
---

<div
  class:list={[
    "container max-w-6xl 2xl:max-w-screen-2xl px-5 mb-5 -mt-5 gap-2",
    "mx-auto flex items-center justify-center group",
  ]}
>
  <SearchIcon
    class:list={[
      "size-6 mt-2 transition-all",
      "text-neutral-400 dark:text-neutral-500",
      "group-hover:text-dark dark:group-hover:text-light",
      "group-focus-within:text-dark dark:group-focus-within:text-light",
      "group-hover:scale-110 group-focus-within:scale-110",
    ]}
  />
  <input
    type="text"
    id="searchInput"
    placeholder="Buscar proyectos"
    spellcheck="false"
    autocorrect="off"
    autocapitalize="off"
    maxlength="100"
    aria-label="Buscar proyectos"
    autocomplete="off"
    inputmode="text"
    class:list={[
      "w-full mx-auto px-3 py-2",
      "bg-transparent outline-none border-b-2 transition-colors",
      "text-dark dark:text-light",
      "border-b-neutral-400 dark:border-b-neutral-500",
      "hover:border-b-neutral-600 dark:hover:border-b-neutral-200",
      "focus:border-b-neutral-600 dark:focus:border-b-neutral-200",
    ]}
  />
  <div class="contents" role="radiogroup" aria-label="Search by category">
    <label
      title="utility"
      for="utilSearch"
      class="category-btn has-[input:checked]:bg-r-red"
      id="label-utility"
    >
      <UtilIcon />
      <input
        type="radio"
        id="utilSearch"
        name="search-selector"
        value="utility"
        aria-labelledby="label-utility"
        role="radio"
        aria-checked="false"
      />
      <span class="sr-only">Utility</span>
    </label>
    <label
      title="videogames"
      for="videogamesSearch"
      class="category-btn has-[input:checked]:bg-r-orange"
      id="label-videogames"
    >
      <GameIcon />
      <input
        type="radio"
        id="videogamesSearch"
        name="search-selector"
        value="videogames"
        aria-labelledby="label-videogames"
        role="radio"
        aria-checked="false"
      />
      <span class="sr-only">Videogames</span>
    </label>
    <label
      title="math"
      for="mathSearch"
      class="category-btn has-[input:checked]:bg-r-yellow"
      id="label-mathematics"
    >
      <MathIcon />
      <input
        type="radio"
        id="mathSearch"
        name="search-selector"
        value="mathematics"
        aria-labelledby="label-mathematics"
        role="radio"
        aria-checked="false"
      />
      <span class="sr-only">Mathematics</span>
    </label>
  </div>
</div>

<style>
  .category-btn {
    @apply transition-all grid place-items-center size-10 aspect-square relative cursor-pointer;
    @apply text-neutral-400 dark:text-neutral-500 hover:border-dark;
    @apply rounded-md border-2 border-transparent active:scale-95;
    input[type="radio"] {
      @apply sr-only;
    }
    &:has(input:checked) {
      @apply border-dark dark:border-light;

      svg {
        @apply mix-blend-difference text-white;
      }
    }
  }
</style>

<script>
  import { type Project } from "@/types/Project";
  import { $, $$ } from "@/lib/domSelector";
  import { PROJECTS } from "@/constants/projects";

  document.addEventListener("astro:page-load", () => {
    const $elems = {
      searchInput: $("#searchInput") as HTMLInputElement,
      allProjects: $$(".project"),
      constructionMessage: $("#constructionMessage"),
      noResultsMessage: $("#noResultsMessage"),
      projectsGrid: $(".projects-grid"),
      categoryBtns: $$(
        ".category-btn input[type='radio']"
      ) as NodeListOf<HTMLInputElement>,
    };

    if (Object.values($elems).some((el) => !el)) return;

    let activeCategory: string | null = null;
    const localStorageKey = "activeCategory";

    // cache project elemenst and titles
    const projectElements = Array.from($elems.allProjects);
    const projectTitles = projectElements.map(
      (p) => p.querySelector("h3")?.textContent?.trim() ?? ""
    );

    if (projectTitles.length > 0) {
      $elems.searchInput.placeholder = `${projectTitles[Math.floor(Math.random() * projectTitles.length)]}`;
    }

    // optimize levenshtein distance function with lazy evaluation
    function levenshteinDistance(
      a: string,
      b: string,
      threshold: number
    ): number {
      const aLen = a.length;
      const bLen = b.length;
      if (Math.abs(aLen - bLen) > threshold) return threshold + 1;

      const matrix = Array(bLen + 1)
        .fill(null)
        .map(() => Array(aLen + 1).fill(0));

      for (let i = 0; i <= bLen; i++) matrix[i][0] = i;
      for (let j = 0; j <= aLen; j++) matrix[0][j] = j;

      for (let i = 1; i <= bLen; i++) {
        let minRow = threshold + 1;
        for (let j = 1; j <= aLen; j++) {
          const cost = b[i - 1] === a[j - 1] ? 0 : 1;
          matrix[i][j] = Math.min(
            matrix[i - 1][j] + 1,
            matrix[i][j - 1] + 1,
            matrix[i - 1][j - 1] + cost
          );
          minRow = Math.min(minRow, matrix[i][j]);
        }
        if (minRow > threshold) return threshold + 1;
      }
      return matrix[bLen][aLen];
    }

    function filterProjects(
      searchTerm: string,
      category: string | null
    ): Project[] {
      const searchLower = searchTerm.toLowerCase();
      const titleThreshold = 4;
      const labelThreshold = 2;

      return PROJECTS.filter(({ title, labels }, idx) => {
        const number = idx < 9 ? `0${idx + 1}` : `${idx + 1}`;
        const titleDistance = levenshteinDistance(
          title.toLowerCase(),
          searchLower,
          titleThreshold
        );

        const labelMatches = labels?.some((label) => {
          return (
            levenshteinDistance(
              label.toLowerCase(),
              searchLower,
              labelThreshold
            ) <= labelThreshold
          );
        });

        return (
          (number.includes(searchLower) ||
            title.toLowerCase().startsWith(searchLower) ||
            labels?.some((label) =>
              label.toLowerCase().startsWith(searchLower)
            ) ||
            titleDistance <= titleThreshold ||
            labelMatches) &&
          (!category ||
            labels?.some((label) => label.toLowerCase().startsWith(category)))
        );
      });
    }

    function renderProjects(filteredProjects: Project[]) {
      const filteredTitles = new Set(
        filteredProjects.map((project) => project.title)
      );
      const classChanges: { $el: Element; shouldShow: boolean }[] = [];

      $elems.allProjects.forEach((project, idx) => {
        const projectTitle = projectTitles[idx];
        const shouldShow = filteredTitles.has(projectTitle);
        if (project.classList.contains("hidden") !== !shouldShow)
          classChanges.push({ $el: project, shouldShow });
      });

      for (const { $el, shouldShow } of classChanges)
        $el.classList.toggle("hidden", !shouldShow);

      $elems.constructionMessage?.classList.toggle(
        "hidden",
        $elems.searchInput.value.trim() !== ""
      );
      $elems.noResultsMessage?.classList.toggle(
        "hidden",
        filteredProjects.length > 0
      );
    }

    function debounce<T extends (...args: any[]) => void>(
      func: T,
      delay: number
    ) {
      let debounceTimer: ReturnType<typeof setTimeout> | null = null;
      return function (this: any, ...args: Parameters<T>) {
        if (debounceTimer) clearTimeout(debounceTimer);
        debounceTimer = setTimeout(() => func.apply(this, args), delay);
      };
    }

    function handleInputEvent(e: Event) {
      const searchTerm = (e.target as HTMLInputElement).value;
      console.time("filterProjects");
      const filteredProjects = filterProjects(searchTerm, activeCategory);
      renderProjects(filteredProjects);
      console.timeEnd("filterProjects");
    }

    function handleCategoryClick(categoryBtn: HTMLInputElement) {
      const selectedCategory = categoryBtn.value;
      localStorage.setItem(localStorageKey, selectedCategory);
      let searchTerm = $elems.searchInput.value;
      $elems.searchInput.value = "";

      if (selectedCategory === activeCategory) {
        activeCategory = null;
        categoryBtn.checked = false;
        categoryBtn.setAttribute("aria-checked", "false");
        searchTerm = "";
      } else {
        activeCategory = selectedCategory;
        categoryBtn.checked = true;
      }

      renderProjects(filterProjects(searchTerm, activeCategory));
    }

    // Restore active category from local storage
    if (localStorage.getItem(localStorageKey)) {
      const storedActiveCategory = localStorage.getItem(localStorageKey);
      if (storedActiveCategory) {
        const storedActiveCategoryBtn = Array.from($elems.categoryBtns).find(
          (btn) => btn.value === storedActiveCategory
        );
        if (storedActiveCategoryBtn) {
          storedActiveCategoryBtn.checked = true;
          storedActiveCategoryBtn.setAttribute("aria-checked", "true");
          activeCategory = storedActiveCategory;
        }
      }
    }

    $elems.categoryBtns.forEach((btn) => {
      btn.addEventListener("click", () => handleCategoryClick(btn));
      btn.addEventListener("change", () => {
        $elems.categoryBtns.forEach((b) => {
          b.setAttribute("aria-checked", b === btn ? "true" : "false");
        });
      });
    });

    $elems.searchInput.addEventListener(
      "input",
      debounce(handleInputEvent, 300)
    );

    // Initial render based on the current input value ¯\_(ツ)_/¯
    const initialFilteredProjects = filterProjects(
      $elems.searchInput.value,
      activeCategory
    );
    renderProjects(initialFilteredProjects);
  });
</script>
