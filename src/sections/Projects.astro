---
import { PROJECTS } from "@/constants/projects";
import ProjectCard from "@/components/ProjectCard.astro";
---

<div
  class="container mx-auto grid place-items-center max-w-6xl 2xl:max-w-screen-2xl px-4 mb-5 -mt-5"
>
  <input
    type="text"
    id="searchInput"
    placeholder="Hola ;D"
    class:list={[
      "w-full mx-auto px-3 py-2",
      "bg-transparent outline-none text-dark dark:text-light transition-colors",
      "border-b-2 border-b-neutral-400 hover:border-b-neutral-600 focus:border-b-neutral-600",
      "dark:border-b-neutral-500 hover:dark:border-b-neutral-200 focus:dark:border-b-neutral-200"
    ]}
  />
</div>
<main
  class:list={[
    "container max-w-6xl 2xl:max-w-screen-2xl",
    "mb-20 mx-auto p-4 gap-x-6 gap-y-8",
    "grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 2xl:grid-cols-4",
  ]}
>
  {
    PROJECTS.map((project, index) => {
      const number = `${index + 1}`.padStart(2, "0");
      return (
        <ProjectCard
          project={project}
          number={number}
          loading={"lazy"}
        />
      );
    })
  }

  <article
    id="noResultsMessage"
    class:list={[
      "min-h-80 relative items-center rounded-lg",
      "col-span-1 sm:col-span-2 lg:col-span-3 2xl:col-span-4",
      "hidden",
    ]}
  >
    <span
      class="flex justify-center flex-col h-full items-center font-semibold text-center text-xl"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
        class="size-16 mb-2"
        viewBox="0 0 24 24"
        ><path d="M0 0h24v24H0z" stroke="none"></path><path
          d="M14.986 3.51A9 9 0 1 0 16.5 19.794c2.489-1.437 4.181-3.978 4.5-6.794M10 10h.01M14 8h.01"
        ></path><path
          d="M12 15c1-1.333 2-2 3-2M20 9v.01M20 6a2.003 2.003 0 0 0 .914-3.782 1.98 1.98 0 0 0-2.414.483"
        ></path></svg
      >
      No pude encontrar lo que buscabas :[
    </span>
  </article>

  <article
    id="constructionMessage"
    class="min-h-80 relative items-center rounded-lg"
  >
    <span
      class="flex justify-center flex-col h-full items-center font-semibold text-center text-xl"
      ><svg
        class="size-16 mb-2"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 576 512"
        fill="currentColor"
      >
        <path
          d="M208 64a48 48 0 1 1 96 0 48 48 0 1 1 -96 0zM9.8 214.8c5.1-12.2 19.1-18 31.4-12.9L60.7 210l22.9-38.1C99.9 144.6 129.3 128 161 128c51.4 0 97 32.9 113.3 81.7l34.6 103.7 79.3 33.1 34.2-45.6c6.4-8.5 16.6-13.3 27.2-12.8s20.3 6.4 25.8 15.5l96 160c5.9 9.9 6.1 22.2 .4 32.2s-16.3 16.2-27.8 16.2H288c-11.1 0-21.4-5.7-27.2-15.2s-6.4-21.2-1.4-31.1l16-32c5.4-10.8 16.5-17.7 28.6-17.7h32l22.5-30L22.8 246.2c-12.2-5.1-18-19.1-12.9-31.4zm82.8 91.8l112 48c11.8 5 19.4 16.6 19.4 29.4v96c0 17.7-14.3 32-32 32s-32-14.3-32-32V405.1l-60.6-26-37 111c-5.6 16.8-23.7 25.8-40.5 20.2S-3.9 486.6 1.6 469.9l48-144 11-33 32 13.7z"
        ></path></svg
      >
      En construcci√≥n ;)
    </span>
  </article>
</main>

<script>
  import { type Project } from "@/types/Project";
  import { $, $$ } from "@/lib/domSelector";
  import { PROJECTS } from "@/constants/projects";

  const searchInput = $("#searchInput") as HTMLInputElement;
  const allProjects = $$(".project");
  const constructionMessage = $("#constructionMessage");
  const noResultsMessage = $("#noResultsMessage");

  const projectTitles: string[] = Array.from(allProjects).map((p) => {
    return p.querySelector("h3")?.textContent?.trim() ?? "";
  });

  searchInput.placeholder = `${projectTitles[Math.floor(Math.random() * projectTitles.length)]}`;

  function filterProjects(searchItem: string) {
    const searchLower = searchItem.toLowerCase();

    const filteredProjects = PROJECTS.filter(({ title, labels }, idx) => {
      const number = `${idx + 1}`.padStart(2, "0");

      return (
        number.includes(searchLower) ||
        title.toLowerCase().includes(searchLower) ||
        labels?.some((label) => label.toLocaleLowerCase().includes(searchLower))
      );
    });

    showProjectCards(filteredProjects);

    constructionMessage?.classList.toggle("hidden", searchLower !== "");
    noResultsMessage?.classList.toggle("hidden", filteredProjects.length > 0);
  }

  function showProjectCards(filteredProjects: Project[]) {
    const filteredTitles = filteredProjects.map((project) => project.title);

    allProjects.forEach((project, idx) => {
      const projectTitle = projectTitles[idx];
      const isVisible = filteredTitles.includes(projectTitle);
      project.classList.toggle("hidden", !isVisible);
    });
  }

  searchInput.addEventListener("input", (e) => {
    const searchTerm = (e.target as HTMLInputElement).value;
    filterProjects(searchTerm);
  });

  filterProjects(searchInput.value);
</script>
