---
import ArrowIcon from "@/icons/ArrowIcon.astro";
import PlusIcon from "@/icons/PlusIcon.astro";
import CLXD from "@/icons/CLXD.astro";
import Popover from "@/components/Popover.astro";
import { Image } from "astro:assets";

interface Props {
  title: string;
  link: string;
  extra?: {
    t1?: string; t3?: string;
    l1?: string; l3?: string;
  }
}

const { title, link, extra } = Astro.props;
const { t1, t3, l1, l3 } = extra ?? {};
---

<Image src="/imgs/rick.webp" alt="Rick Astley" width={447} height={558} loading={"eager"} class="fixed -top-40 left-1/2 w-36 z-10" />
<nav>
  <div class="nav__content">
    <a href="https://clxd.vercel.app" target="_blank" rel="noopener noreferrer" id="clxd" aria-expanded="false">
      <span class="sr-only">CLXD's website</span>
      <CLXD />
    </a>
    <div class="nav__control">
      <input type="checkbox" id="menu" class="sr-only" />
      <label for="menu">
        <PlusIcon />
        <span class="sr-only">Toggle Menu</span>
      </label>
    </div>
    <div class="nav__options">
      <a
        class="link"
        href={l1 ?? "https://x.com/intent/follow?screen_name=crashlanxd"}
        target={l1 ? "_self" : "_blank"}
        rel="noopener noreferrer"
      >
        <span>{t1 ?? "Follow"}</span>
        <ArrowIcon class="size-6" />
      </a>
      <a class="link" href={link} target="_self">
        <span>{title}</span>
        <ArrowIcon class="size-6" />
      </a>
      <a
        class="link"
        href={l3 ?? "https://github.com/CrashLanXD/101-proyectos-javascript"}
        target={l3 ? "_self" : "_blank"}
        rel="noopener noreferrer"
      >
        <span>{t3 ?? "Github"}</span>
        <ArrowIcon class="size-6" />
      </a>
    </div>
    <button aria-pressed="false" class="theme-toggle">
      <svg aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" fill="currentColor" d="M12 3v2.25m6.364.386l-1.591 1.591M21 12h-2.25m-.386 6.364l-1.591-1.591M12 18.75V21m-4.773-4.227l-1.591 1.591M5.25 12H3m4.227-4.773L5.636 5.636M15.75 12a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0z"></path><path stroke-linecap="round" stroke-linejoin="round" fill="currentColor" d="M21.752 15.002A9.718 9.718 0 0118 15.75c-5.385 0-9.75-4.365-9.75-9.75 0-1.33.266-2.597.748-3.752A9.753 9.753 0 003 11.25C3 16.635 7.365 21 12.75 21a9.753 9.753 0 009.002-5.998z"></path></svg>
      <span class="sr-only">Toggle Theme</span>
    </button>
  </div>
  <Popover /> 
</nav>

<script>
  import { $ } from "@/lib/domSelector";
  document.addEventListener("astro:page-load", () => {
    const toggle = $(".theme-toggle");

    const savedTheme = localStorage.getItem("theme");
    if (savedTheme) {
      document.documentElement.dataset.theme = savedTheme;
      toggle?.setAttribute("aria-pressed", String(savedTheme === "light"));
    }

    const switchTheme = () => {
      const isDark = !toggle?.matches("[aria-pressed=true]");
      const newTheme = isDark ? "light" : "dark";
      toggle?.setAttribute("aria-pressed", String(isDark));
      document.documentElement.dataset.theme = newTheme;
      localStorage.setItem("theme", newTheme);
    };

    const toggleTheme = (e: Event) => {
      e.preventDefault();
      if (!(document as any).startViewTransition) {
        switchTheme();
      } else {
        (document as any).startViewTransition(switchTheme);
      }
    };

    toggle?.addEventListener("click", toggleTheme);
  });
</script>

<style>
  :root { --bg: light-dark(#f2f2f2, #0c0c0c); }

  nav {
    @apply min-w-full sticky inset-0 uppercase text-xs font-extrabold z-10 border-b-4 border-b-r-orange transition-colors;
    background: var(--bg);
    height: 60px;
    clip-path: inset(0 0 -9999px 0);
  }

  .nav__content {
    @apply flex max-w-full mx-auto h-full gap-4 relative justify-between transition-colors;
    background: var(--bg);
  }

  .nav__control {
    width: 60px;
  }

  label {
    @apply grid place-items-center size-full cursor-pointer;
  }

  .nav__control svg {
    width: 24px;
    stroke-width: 2.5;
    rotate: calc(var(--active-nav, 0) * 45deg);
    transition: rotate var(--speed);
  }

  input:focus-visible + label {
    outline: 1px solid var(--r-yellow);
  }

  .nav__content > a, .theme-toggle {
    @apply p-0 mx-4 max-h-full rounded-xl aspect-square bg-transparent grid place-items-center hover:bg-black/20 dark:hover:bg-white/20 transition-colors m-1;
    & svg {
      @apply text-current fill-current w-[60%];
    }
  }

  .nav__options a {
    @apply relative px-8 py-4;
    height: 60px;
  }

  .nav__options svg {
    height: 16px;
    stroke-width: 2.5px;
  }

  .nav__options {
    position: absolute;
    left: 0;
    top: 100%;
    background: var(--bg);
    width: 100%;
    translate: 0 calc(-100% + (var(--active-nav, 0) * (100% + 2px)));
    transition: translate var(--speed);
    z-index: -1;
  }

  a:focus-visible, button:focus-visible {
    outline: 1px solid var(--r-yellow);
  }

  :root:has(#menu:checked) {
    --active-nav: 1;
  }

  .nav__options a:not(:last-of-type) {
    border-bottom: 2px solid var(--r-orange);
  }

  nav a {
    display: flex;
    place-items: center;
    padding: 1rem;
    text-decoration: none;
    justify-content: space-between;
    color: currentColor;
  }

  nav a:is(:hover, :focus-visible) {
    --active: 1;
  }

  .link svg {
    opacity: var(--active, 0);
    rotate: calc(var(--active, 0) * -45deg);
    scale: calc(1 + (var(--active, 0) * 0.1));
    transition:
      opacity calc(var(--speed) * 1.5),
      rotate var(--speed),
      scale var(--speed);
  }

  :root {
    --speed: 0.25s;
  }

  @media (min-width: 768px) {
    :root {
      --lerp-0: 1;
      --lerp-1: calc(sin(30deg));
      --speed: 0.25s;
    }
    .nav__control {
      display: none;
    }
    .nav__options {
      flex: 1;
      display: grid;
      grid-auto-flow: column;
      grid-auto-columns: 1fr;
      position: static;
      width: auto;
      translate: 0 0;
      z-index: 1;
    }

    .nav__options a:not(:last-of-type) {
      border-bottom: 0;
    }

    .link::before {
      content: "";
      position: absolute;
      height: 300%;
      border-bottom: 4px solid var(--r-orange);
      bottom: 0;
      background: var(--bg);
      z-index: -1;
      left: 0;
      right: 0;
      transition: 150ms;
    }
    .link {
      translate: 0 calc(var(--lerp, 0) * 80%);
      transition: translate var(--speed);
    }

    :is(.link:hover, .link:focus-visible) {
      --lerp: var(--lerp-0);
      z-index: 5;

      &::before {
        border-color: var(--r-yellow);
      }
    }
    .link:has(+ :is(.link:hover, .link:focus-visible)), :is(.link:hover, .link:focus-visible) + .link {
      --lerp: var(--lerp-1);
      z-index: 4;

      &::before {
        border-color: var(--r-red);
      }
    }
  }

  .theme-toggle[aria-pressed="true"] svg path:last-of-type {
    display: block;
  }

  .theme-toggle[aria-pressed="true"] svg path:first-of-type, .theme-toggle svg path:last-of-type {
    display: none;
  }
</style>
